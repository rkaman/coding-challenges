//Base Conversion
#import <stdlib.h>
char * convert(const char * input, const char * source, const char * target) {
  // Code goes here...
  int ilen = 0;
  const char* ii = input;
  const char* si = source;
  const char* ti = target;
  
  while(*ii != 0)
  {
    ilen++;
    ii++;
  }
  int startBase = 0;
  double baseTen = 0;
  while(*si != 0)
  {
    startBase ++;
    si++;
  }
  int endBase = 0;
  while(*ti != 0)
  {
    endBase ++;
    ti++;
  }
  
  double digit = 1;
  for(int i = ilen-1; i >=0; i--)
  {
    int j = 0;
    while(source[j] != input[i])
      j++;
    baseTen += j* digit;
    digit *= startBase;
    
  }
  
  int strlen = 1;
  digit = 1;
  while(baseTen/digit >=endBase)
  {
    digit *= endBase;
    strlen++;
  }
  char* returnString = (char*)malloc(sizeof(char)*strlen+1);
  char lenCount= 0;
  while(lenCount < strlen)
  {
     returnString[lenCount] = target[(int)(baseTen/digit)];
     lenCount++;
     baseTen = baseTen - digit*(int)(baseTen/digit);
     digit/=endBase;
     
    
  }
  
  returnString[strlen] = 0;
  return returnString;
}

//Build a pile of Cubes
long long findNb(long long m)
{
  long long v = 1;
  long long n = 1;
  while(v < m)
  {
    n++;
    v+= n*n*n;
  }
  if(v!=m)
    return -1;
  return n;
}

//Perimeter of squares in a rectangle
typedef unsigned long long ull;
ull perimeter(int n) {
  // your code
  ull ret = 0;
  ull f1,f2,f3;
  f1 = 0;
  f2 = 0;
  f3 = 1;
  ret += f3*4;
  int count = 0;
  while (count<n)
  {
    f1 = f2;
    f2 = f3;
    f3 = f1+f2;
    ret += f3*4; 
    count++;
  }
  return ret;
}

//Bouncing Balls
int bouncingBall(double h, double bounce, double window) {
    // your code;
    if(h <= 0|| bounce <=0 || bounce >=1 || window >= h) //conditions arent met
      return -1;
    int res = 0;
    while (h >= window)
    {
      //falling
      res++;
      h*= bounce;
      if(h>= window)  //rising
        res++;
    }
    return res;
}

//Ones and Zeros
#include <stddef.h>
unsigned binary_array_to_numbers(const unsigned *bits, size_t count)
{
  unsigned res = 0;
  unsigned twoPow = 1;
  for( int i = count -1; i >= 0; i--)
  {
    res += bits[i]*twoPow;
    twoPow*=2;
  }
  return res;
}

//Going to zero or to infinity?
double going(int n) {
    // your code
    double fact = 1;
    double sum = 0;
    for(int i = 1; i <= n; i++)
    {
      fact *= i;
      sum += fact;
      if(fact > 1000000)
      {
        fact /= 1000000;
        sum /= 1000000;
      }
    }
    return sum/fact;
}

//Printer Errors
char* printerError(char *s) {
    // your code
    char num = 0;
    char den = 0;
    char nnum = 0;
    char dnum = 0;
    while(*s <= 'z' && *s >= 'a' )
    {
      if (*s < 'a' || *s > 'm')
        num++;
      den++;
      s++;
      printf("%c", *s);
    }
    char tmpnum = num;
    char tmpden = den;
    while (tmpnum != 0)
    {
      tmpnum/=10;
      nnum++;
    }
    while (tmpden != 0)
    {
      tmpden/=10;
      dnum++;
    }
    char* ret = (char*)malloc(sizeof(char)*(2+nnum+dnum));
    char ind = 2+nnum+dnum-1;
    ret[ind] = 0;
    ind--;
    while (den != 0)
    {
      ret[ind] = den%10+0x30;
      den/=10;
      ind--;
    }
    ret[ind] = '/';
    ind--;
    while (num != 0)
    {
      ret[ind] = num%10+0x30;
      num/=10;
      ind--;
    }
    
    printf("%d",ind);
    return ret;
}

//Buying a car
int* nbMonths(int startPriceOld, int startPriceNew, int savingperMonth, double percentLossByMonth) {
  //multiply by 1000 to get the right precision for the tests
  //also creating new ints priceOld and priceNew for readability
  int priceOld = startPriceOld*1000;
  int currMoney = priceOld;
  int priceNew = startPriceNew*1000;
  int months = 0;
 
  while( currMoney < priceNew )
  {
    months++;
    if(months%2==0)
      percentLossByMonth += 0.5;
    priceOld = round((double)priceOld * (1.0-percentLossByMonth/100)); 
    priceNew = round((double)priceNew * (1.0-percentLossByMonth/100));
    currMoney = priceOld + months * savingperMonth * 1000;
  }

  int* ret = (int*)malloc(sizeof(int)*2);
  ret[0] = months;
  ret[1] = (currMoney-priceNew+500)/1000;
  return ret;
}